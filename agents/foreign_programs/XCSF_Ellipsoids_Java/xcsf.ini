# xcsf.ini

##### experiments & output ####################################################
# doWriteOutput         Specifies, if xcsf writes experimental settings,
#                       results and plots to the filesystem.
# doWritePopulation     Specifies, if xcsf writes the population of classifiers
#                       to allow for a detailed analysis.
# outputFolder          Experimental settings, results & plots are stored here;
#                       relative or absolute path.
# numberOfExperiments   Specifies the number of investigated experiments.
# averageExploitTrials  The number of test instances that should be averaged
#                       in the performance evaluation.
# initialSeed           The initialization of the pseudo random generator.
#                       Must be at least one and smaller than 2147483647. Will
#                       be used only if "doRandomize" is set to false.
# doRandomize           Specifies if the seed should be randomized (based on
#                       the current milliseconds of the computer time).
doWriteOutput = true
doWritePopulation = true
outputFolder = output
numberOfExperiments = 20
averageExploitTrials = 500
initialSeed = 101
doRandomize = false

##### xcsf settings ###########################################################
# maxLearningIterations  The number of learning iterations in one experiment.
# maxPopSize             the maximum number of micro classifiers in the
#                        population.
# alpha = 1.0            The accuracy factor (decrease) in inaccurate
#                        classifiers. Default: 1.0
# beta = 0.1             The learning rate for updating fitness, prediction
#                        error, and set size estimate in xcsf's classifiers.
#                        Default: 0.1
# eta = 0.1              The learning rate for updating the prediction.
#                        Default: 0.1
# delta = 0.1            The fraction of the mean fitness of the population
#                        below which the fitness of a classifier may be
#                        considered in its vote for deletion. Default: 0.1
# minConditionStretch    The minimum stretch for covering.
# coverConditionRange    The range of randomization for covering. The maximum
#                        stretch is minConditionStretch + coverConditionRange.
maxLearningIterations = 100000
maxPopSize = 6400
alpha = 1.0
beta = 0.1
eta = 0.1
delta = 0.1
minConditionStretch = 0.01
coverConditionRange = 1

##### compaction & matching ###################################################
# startCompaction        The compaction begins at this iteration.
# compactionType         The compaction type:
#           0 = condensation and normal matching
#           1 = condensation and closest classifier matching
#           2 = condensation, greedy compaction and normal matching
#           3 = condensation, greedy compaction and closest classifier matching
#                        Default: 3
# doNumClosestMatch      Specifies if closest classifier matching is always
#                        active. Default: false
# numClosestMatch        The number of closest classifiers in the matchset, if
#                        doNumClosestMatch is true. Default: 20
startCompaction = 90000
compactionType = 3
doNumClosestMatch = false
numClosestMatch = 20

##### evolution parameters ####################################################
# theta_GA          The threshold for the GA application. Default: 50
# selectionType     Choice of selection type:
#                   0 = proportionate selection
#                   ]0,1] = tournament selection (set-size proportional)
#                   Default: 0.4 (tournament selection)
# pM                The probability of mutating one allele, often termed mu,
#                   in an offspring classifier. Default: 0.05
# pX                The probability to apply crossover to the offspring, often
#                   termed chi. Default: 1.0
# theta_del         Specifies the threshold over which the fitness of a
#                   classifier may be considered in its deletion probability.
#                   Default: 20
# theta_sub         The experience of a classifier required to be a subsumer.
#                   Default: 20
# doGASubsumption   Specifies if GA subsumption should be executed.
#                   Default: true
theta_GA = 50
selectionType = 0.4
pM = 0.05
pX = 1.0
theta_del = 20
theta_sub = 20
doGASubsumption = true

##### classifier error & fitness ##############################################
# nu                         Specifies the exponent in the power function for
#                            the fitness evaluation. Default: 5
# epsilon_0                  The error threshold under which the accuracy of a
#                            classifier is set to one. Default: 0.01
# predictionErrorReduction   The factor (reduction) of the prediction error
#                            when generating an offspring classifier.
#                            Default: 1.0 (no reduction)
# fitnessReduction           The factor (reduction) of the fitness when
#                            generating an offspring classifier. Default: 0.1
# predictionErrorIni         The initial prediction error value when generating
#                            a new classifier (covering). Default: 0.0
# fitnessIni                 The initial fitness value when generating a new
#                            classifier (covering). Default: 0.01
nu = 5
epsilon_0 = 0.01
predictionErrorReduction = 1.0
fitnessReduction = 0.1
predictionErrorIni = 0.0
fitnessIni = 0.01

##### recursive least squares prediction ######################################
#rlsInitScaleFactor             The initial diagonalvalues of the gainmatrix.
#                               Deault: 1000
#lambdaRLS                      Forget rate for RLS. Danger: small values may
#                               lead to instabilities! Default: 1.0
#resetRLSPredictionsAfterSteps  If set, then after the specified number of
#                               iterations, all gain matrizes are reset
#                               according to the initial scale factor.
#                               You can set an integer or the tag
#                               'startCompaction'. Default: startCompaction
#predictionOffsetValue          The offset factor that is multiplied with the
#                               first coefficient (actually that is the offset)
#                               of the prediction. Default: 1
rlsInitScaleFactor = 1000
lambdaRLS = 1.0
resetRLSPredictionsAfterSteps = startCompaction
predictionOffsetValue = 1




